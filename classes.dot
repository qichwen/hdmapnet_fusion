digraph "classes" {
rankdir=BT
charset="utf-8"
"nuscenes.map_expansion.map_api.NuScenesMap" [color="black", fontcolor="black", label=<{nuscenes.map_expansion.map_api.NuScenesMap|arcline_path_3 : Dict[str, List[dict]]<br ALIGN="LEFT"/>canvas_edge<br ALIGN="LEFT"/>carpark_area<br ALIGN="LEFT"/>connectivity : Dict[str, dict]<br ALIGN="LEFT"/>dataroot : str<br ALIGN="LEFT"/>drivable_area<br ALIGN="LEFT"/>explorer<br ALIGN="LEFT"/>geometric_layers : list<br ALIGN="LEFT"/>json_fname<br ALIGN="LEFT"/>json_obj<br ALIGN="LEFT"/>lane<br ALIGN="LEFT"/>lane_connector<br ALIGN="LEFT"/>lane_divider<br ALIGN="LEFT"/>layer_names : list<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>lookup_polygon_layers : list<br ALIGN="LEFT"/>map_name : str<br ALIGN="LEFT"/>node<br ALIGN="LEFT"/>non_geometric_layers : list<br ALIGN="LEFT"/>non_geometric_line_layers : list<br ALIGN="LEFT"/>non_geometric_polygon_layers : list<br ALIGN="LEFT"/>ped_crossing<br ALIGN="LEFT"/>polygon<br ALIGN="LEFT"/>road_block<br ALIGN="LEFT"/>road_divider<br ALIGN="LEFT"/>road_segment<br ALIGN="LEFT"/>stop_line<br ALIGN="LEFT"/>traffic_light<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>walkway<br ALIGN="LEFT"/>|discretize_centerlines(resolution_meters: float): List[np.array]<br ALIGN="LEFT"/>discretize_lanes(tokens: List[str], resolution_meters: float): Dict[str, List[Tuple[float, float, float]]]<br ALIGN="LEFT"/>extract_line(line_token: str): LineString<br ALIGN="LEFT"/>extract_polygon(polygon_token: str): Polygon<br ALIGN="LEFT"/>get(layer_name: str, token: str): dict<br ALIGN="LEFT"/>get_arcline_path(lane_token: str): List[ArcLinePath]<br ALIGN="LEFT"/>get_bounds(layer_name: str, token: str): Tuple[float, float, float, float]<br ALIGN="LEFT"/>get_closest_lane(x: float, y: float, radius: float): str<br ALIGN="LEFT"/>get_incoming_lane_ids(lane_token: str): List[str]<br ALIGN="LEFT"/>get_map_geom(patch_box: Tuple[float, float, float, float], patch_angle: float, layer_names: List[str]): List[Tuple[str, List[Geometry]]]<br ALIGN="LEFT"/>get_map_mask(patch_box: Optional[Tuple[float, float, float, float]], patch_angle: float, layer_names: List[str], canvas_size: Optional[Tuple[int, int]]): np.ndarray<br ALIGN="LEFT"/>get_next_roads(x: float, y: float): Dict[str, List[str]]<br ALIGN="LEFT"/>get_outgoing_lane_ids(lane_token: str): List[str]<br ALIGN="LEFT"/>get_records_in_patch(box_coords: Tuple[float, float, float, float], layer_names: List[str], mode: str): Dict[str, List[str]]<br ALIGN="LEFT"/>get_records_in_radius(x: float, y: float, radius: float, layer_names: List[str], mode: str): Dict[str, List[str]]<br ALIGN="LEFT"/>getind(layer_name: str, token: str): int<br ALIGN="LEFT"/>is_record_in_patch(layer_name: str, token: str, box_coords: Tuple[float, float, float, float], mode: str): bool<br ALIGN="LEFT"/>layers_on_point(x: float, y: float, layer_names: List[str]): Dict[str, str]<br ALIGN="LEFT"/>record_on_point(x: float, y: float, layer_name: str): str<br ALIGN="LEFT"/>render_centerlines(resolution_meters: float, figsize: Union[None, float, Tuple[float, float]], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_egoposes_on_fancy_map(nusc: NuScenes, scene_tokens: List, verbose: bool, out_path: str, render_egoposes: bool, render_egoposes_range: bool, render_legend: bool, bitmap: Optional[BitMap]): Tuple[np.ndarray, Figure, Axes]<br ALIGN="LEFT"/>render_layers(layer_names: List[str], alpha: float, figsize: Union[None, float, Tuple[float, float]], tokens: List[str], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_map_in_image(nusc: NuScenes, sample_token: str, camera_channel: str, alpha: float, patch_radius: float, min_polygon_area: float, render_behind_cam: bool, render_outside_im: bool, layer_names: List[str], verbose: bool, out_path: str): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_map_mask(patch_box: Tuple[float, float, float, float], patch_angle: float, layer_names: List[str], canvas_size: Tuple[int, int], figsize: Tuple[int, int], n_row: int): Tuple[Figure, List[Axes]]<br ALIGN="LEFT"/>render_map_patch(box_coords: Tuple[float, float, float, float], layer_names: List[str], alpha: float, figsize: Tuple[int, int], render_egoposes_range: bool, render_legend: bool, bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_next_roads(x: float, y: float, alpha: float, figsize: Union[None, float, Tuple[float, float]], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_record(layer_name: str, token: str, alpha: float, figsize: Tuple[float, float], other_layers: List[str], bitmap: Optional[BitMap]): Tuple[Figure, Tuple[Axes, Axes]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"nuscenes.map_expansion.map_api.NuScenesMapExplorer" [color="black", fontcolor="black", label=<{nuscenes.map_expansion.map_api.NuScenesMapExplorer|canvas_aspect_ratio<br ALIGN="LEFT"/>canvas_max_x<br ALIGN="LEFT"/>canvas_max_y<br ALIGN="LEFT"/>canvas_min_x : int<br ALIGN="LEFT"/>canvas_min_y : int<br ALIGN="LEFT"/>color_map : Optional[dict]<br ALIGN="LEFT"/>map_api<br ALIGN="LEFT"/>representative_layers : Tuple[str]<br ALIGN="LEFT"/>|extract_line(line_token: str): LineString<br ALIGN="LEFT"/>extract_polygon(polygon_token: str): Polygon<br ALIGN="LEFT"/>get_bounds(layer_name: str, token: str): Tuple[float, float, float, float]<br ALIGN="LEFT"/>get_map_geom(patch_box: Tuple[float, float, float, float], patch_angle: float, layer_names: List[str]): List[Tuple[str, List[Geometry]]]<br ALIGN="LEFT"/>get_map_mask(patch_box: Optional[Tuple[float, float, float, float]], patch_angle: float, layer_names: List[str], canvas_size: Tuple[int, int]): np.ndarray<br ALIGN="LEFT"/>get_patch_coord(patch_box: Tuple[float, float, float, float], patch_angle: float): Polygon<br ALIGN="LEFT"/>get_records_in_patch(box_coords: Tuple[float, float, float, float], layer_names: List[str], mode: str): Dict[str, List[str]]<br ALIGN="LEFT"/>is_record_in_patch(layer_name: str, token: str, box_coords: Tuple[float, float, float, float], mode: str): bool<br ALIGN="LEFT"/>layers_on_point(x: float, y: float, layer_names: List[str]): Dict[str, str]<br ALIGN="LEFT"/>map_geom_to_mask(map_geom: List[Tuple[str, List[Geometry]]], local_box: Tuple[float, float, float, float], canvas_size: Tuple[int, int]): np.ndarray<br ALIGN="LEFT"/>mask_for_lines(lines: LineString, mask: np.ndarray): np.ndarray<br ALIGN="LEFT"/>mask_for_polygons(polygons: MultiPolygon, mask: np.ndarray): np.ndarray<br ALIGN="LEFT"/>record_on_point(x: float, y: float, layer_name: str): str<br ALIGN="LEFT"/>render_centerlines(resolution_meters: float, figsize: Union[None, float, Tuple[float, float]], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_egoposes_on_fancy_map(nusc: NuScenes, scene_tokens: List, verbose: bool, out_path: str, render_egoposes: bool, render_egoposes_range: bool, render_legend: bool, bitmap: Optional[BitMap]): Tuple[np.ndarray, Figure, Axes]<br ALIGN="LEFT"/>render_layers(layer_names: List[str], alpha: float, figsize: Union[None, float, Tuple[float, float]], tokens: List[str], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_map_in_image(nusc: NuScenes, sample_token: str, camera_channel: str, alpha: float, patch_radius: float, min_polygon_area: float, render_behind_cam: bool, render_outside_im: bool, layer_names: List[str], verbose: bool, out_path: str): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_map_mask(patch_box: Tuple[float, float, float, float], patch_angle: float, layer_names: List[str], canvas_size: Tuple[int, int], figsize: Tuple[int, int], n_row: int): Tuple[Figure, List[Axes]]<br ALIGN="LEFT"/>render_map_patch(box_coords: Tuple[float, float, float, float], layer_names: List[str], alpha: float, figsize: Tuple[float, float], render_egoposes_range: bool, render_legend: bool, bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_next_roads(x: float, y: float, alpha: float, figsize: Union[None, float, Tuple[float, float]], bitmap: Optional[BitMap]): Tuple[Figure, Axes]<br ALIGN="LEFT"/>render_record(layer_name: str, token: str, alpha: float, figsize: Union[None, float, Tuple[float, float]], other_layers: List[str], bitmap: Optional[BitMap]): Tuple[Figure, Tuple[Axes, Axes]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"nuscenes.map_expansion.map_api.NuScenesMapExplorer" -> "nuscenes.map_expansion.map_api.NuScenesMap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="explorer", style="solid"];
"nuscenes.map_expansion.map_api.NuScenesMap" -> "nuscenes.map_expansion.map_api.NuScenesMapExplorer" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="map_api", style="solid"];
}
